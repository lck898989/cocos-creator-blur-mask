// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  const int c_samplesX = 15;
  const int c_samplesY = 15;

  const float c_textureSize = 400.;

  const int c_halfSamplesX = c_samplesX / 2;
  const int c_halfSamplesY = c_samplesY / 2;
  const float c_pixelSize = (1. / c_textureSize);

  float gaussian(float sigma,float x) {
    return exp(-(x * x) / (2. *  sigma *  sigma));
  }

  vec3 blurPixel(vec2 uv) {
    float c_sigmaX = 5.;
    float c_sigmaY = 5.;

    float total = 0.;
    vec3 ret = vec3(0.);
    for(int iy = 0; iy < c_samplesY; ++iy) {
      float fy = gaussian(c_sigmaY,float(iy) - float(c_halfSamplesY));
      float offsetY = float(iy - c_halfSamplesY) * c_pixelSize;
      for(int ix = 0; ix < c_samplesX; ++ix) {
        float fx = gaussian(c_sigmaX,float(ix) - float(c_halfSamplesX));
        float offsetX = float(ix - c_halfSamplesX) *  c_pixelSize;
        total += fx * fy;
        ret += texture(texture,uv + vec2(offsetX,offsetY)).rgb * fx * fy;
      }
    }
    return ret / total;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
    gl_FragColor = vec4(blurPixel(v_uv0),1.);
  }
}%
