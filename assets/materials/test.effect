// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform ARGS {
    float bightness;
    float blurAmount;
    float width;
    float height;

  }

  // 随机值
	float rand(vec2 co) {
		return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);
	}

	// 降低亮度
	vec4 dim(vec4 col, float factor) {
		return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);
	}
	
	vec4 blur(vec2 uv){
		// 重复次数，值越大模糊质量越高，但性能越低
		#define repeats 16.0

		// 模糊值
		float _blurAmount = 0.08 * blurAmount;

		vec4 blurred = vec4(0.0);

    vec2 offset = vec2(0.,0.);
		// 重复采样
		for(float i = 0.0; i < repeats; i ++ ) {
      offset += i * 0.0004;
			// 第一采样点
			vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + _blurAmount);
			vec2 uv2 = uv + (q * _blurAmount);
			blurred += texture2D(texture, uv + offset).rgba / 2.0;

      // blurred *= 
      // blurred /= blurred / 2;
			
			// 第二采样点
			q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + _blurAmount);
			uv2 = uv + (q * _blurAmount);
			blurred += texture2D(texture, uv2 + offset).rgba / 2.0;
      // blurred /= blurred / 2;
		}

		// 中和
		blurred /= (repeats / 2.);

		return blurred;
	}

  float SCurve (float x) {
		x = x * 2.0 - 1.0;
		return -x * abs(x) * 0.5 + x + 0.5;

  }
  // 模糊竖直方向上的像素点
  vec4 BlurV (sampler2D source, vec2 size, vec2 uv, float radius) {
    if (radius >= 1.0)
    {
      vec4 A = vec4(0.0); 
      vec4 C = vec4(0.0); 

      float height = 1.0 / size.y;
      float width = 1. / size.x;

      float divisor = 0.0; 
      float weight = 0.0;
      
      float radiusMultiplier = 1.0 / radius;

      for (float y = -20.0; y <= 20.0; y++)
      {
        A = texture(source, uv + vec2(y * width * 0.3, y * height));
                
        weight = SCurve(1.0 - (abs(y) * radiusMultiplier)); 
      
        C += A * weight; 
              
        divisor += weight; 
      }

      return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);
    }
    return texture(source, uv);
  }

  // 模糊水平方向上的像素点
  vec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {
    if (radius >= 1.0)
    {
      vec4 A = vec4(0.0); 
      vec4 C = vec4(0.0); 

      float width = 1.0 / size.x;

      float divisor = 0.0; 
      float weight = 0.0;
      
      float radiusMultiplier = 1.0 / radius;
          
          // Hardcoded for radius 20 (normally we input the radius
          // in there), needs to be literal here
          
      for (float x = -20.0; x <= 20.0; x++)
      {
        A = texture(source, uv + vec2(x * width, 0.0));
              
        weight = SCurve(1.0 - (abs(x) * radiusMultiplier)); 
      
        C += A * weight; 
              
        divisor += weight; 
      }

      return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);
    }

    return texture(source, uv);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);
    vec2 size = vec2(width,height);
    gl_FragColor = o;
    vec4 color = BlurV(texture,size,v_uv0,500.);
    color.a = 0.6;
    color *= 1.05;
    // color += BlurH(textue,size,v_uv0,20.);
    // color *= vec4(1.,1.,1.,0.4);
    // color.a = 0.4;
    // color *= 0.6;
    gl_FragColor = color;
  }
}%
