{
  "ver": "1.0.23",
  "uuid": "dfe3ab44-5bce-4cf9-836c-1c9accf53921",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float blurAmount;\nuniform float width;\nuniform float height;\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\n\nvec4 blur(vec2 uv){\n\n  float _blurAmount = 0.08 * blurAmount;\n\n  vec4 blurred = vec4(0.0);\n\n  vec2 offset = vec2(0.,0.);\n\n  for(float i = 0.0; i < 16.0; i ++ ) {\n    offset += i * 0.0004;\n\n    vec2 q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + _blurAmount);\n    vec2 uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv + offset).rgba / 2.0;\n\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + _blurAmount);\n    uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv2 + offset).rgba / 2.0;\n\n  }\n\n  blurred /= (16.0 / 2.);\n\n  return blurred;\n}\n\nfloat SCurve (float x) {\n  x = x * 2.0 - 1.0;\n  return -x * abs(x) * 0.5 + x + 0.5;\n\n}\n\nvec4 BlurV (sampler2D source, vec2 size, vec2 uv, float radius) {\n  if (radius >= 1.0)\n  {\n    vec4 A = vec4(0.0); \n    vec4 C = vec4(0.0); \n\n    float height = 1.0 / size.y;\n    float width = 1. / size.x;\n\n    float divisor = 0.0; \n    float weight = 0.0;\n    \n    float radiusMultiplier = 1.0 / radius;\n\n    for (float y = -20.0; y <= 20.0; y++)\n    {\n      A = texture2D(source, uv + vec2(y * width * 0.3, y * height));\n              \n      weight = SCurve(1.0 - (abs(y) * radiusMultiplier)); \n    \n      C += A * weight; \n            \n      divisor += weight; \n    }\n\n    return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n  }\n  return texture2D(source, uv);\n}\n\nvec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {\n  if (radius >= 1.0)\n  {\n    vec4 A = vec4(0.0); \n    vec4 C = vec4(0.0); \n\n    float width = 1.0 / size.x;\n\n    float divisor = 0.0; \n    float weight = 0.0;\n    \n    float radiusMultiplier = 1.0 / radius;\n\n    for (float x = -20.0; x <= 20.0; x++)\n    {\n      A = texture2D(source, uv + vec2(x * width, 0.0));\n            \n      weight = SCurve(1.0 - (abs(x) * radiusMultiplier)); \n    \n      C += A * weight; \n            \n      divisor += weight; \n    }\n\n    return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n  }\n\n  return texture2D(source, uv);\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n  vec2 size = vec2(width,height);\n  gl_FragColor = o;\n  vec4 color = BlurV(texture,size,v_uv0,500.);\n  color.a = 0.6;\n  color *= 1.05;\n\n  gl_FragColor = color;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS {\n  float bightness;\n  float blurAmount;\n  float width;\n  float height;\n\n}\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\n\nvec4 blur(vec2 uv){\n\n  float _blurAmount = 0.08 * blurAmount;\n\n  vec4 blurred = vec4(0.0);\n\n  vec2 offset = vec2(0.,0.);\n\n  for(float i = 0.0; i < 16.0; i ++ ) {\n    offset += i * 0.0004;\n\n    vec2 q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + _blurAmount);\n    vec2 uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv + offset).rgba / 2.0;\n\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + _blurAmount);\n    uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv2 + offset).rgba / 2.0;\n\n  }\n\n  blurred /= (16.0 / 2.);\n\n  return blurred;\n}\n\nfloat SCurve (float x) {\n  x = x * 2.0 - 1.0;\n  return -x * abs(x) * 0.5 + x + 0.5;\n\n}\n\nvec4 BlurV (sampler2D source, vec2 size, vec2 uv, float radius) {\n  if (radius >= 1.0)\n  {\n    vec4 A = vec4(0.0); \n    vec4 C = vec4(0.0); \n\n    float height = 1.0 / size.y;\n    float width = 1. / size.x;\n\n    float divisor = 0.0; \n    float weight = 0.0;\n    \n    float radiusMultiplier = 1.0 / radius;\n\n    for (float y = -20.0; y <= 20.0; y++)\n    {\n      A = texture(source, uv + vec2(y * width * 0.3, y * height));\n              \n      weight = SCurve(1.0 - (abs(y) * radiusMultiplier)); \n    \n      C += A * weight; \n            \n      divisor += weight; \n    }\n\n    return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n  }\n  return texture(source, uv);\n}\n\nvec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {\n  if (radius >= 1.0)\n  {\n    vec4 A = vec4(0.0); \n    vec4 C = vec4(0.0); \n\n    float width = 1.0 / size.x;\n\n    float divisor = 0.0; \n    float weight = 0.0;\n    \n    float radiusMultiplier = 1.0 / radius;\n\n    for (float x = -20.0; x <= 20.0; x++)\n    {\n      A = texture(source, uv + vec2(x * width, 0.0));\n            \n      weight = SCurve(1.0 - (abs(x) * radiusMultiplier)); \n    \n      C += A * weight; \n            \n      divisor += weight; \n    }\n\n    return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n  }\n\n  return texture(source, uv);\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n  vec2 size = vec2(width,height);\n  gl_FragColor = o;\n  vec4 color = BlurV(texture,size,v_uv0,500.);\n  color.a = 0.6;\n  color *= 1.05;\n\n  gl_FragColor = color;\n}\n"
      }
    }
  ],
  "subMetas": {}
}