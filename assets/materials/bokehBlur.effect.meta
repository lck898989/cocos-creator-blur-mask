{
  "ver": "1.0.23",
  "uuid": "f4dd1b81-5d13-49c1-9bc0-d69c8b245232",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nconst int c_samplesX = 15;\nconst int c_samplesY = 15;\n\nconst float c_textureSize = 400.;\n\nconst int c_halfSamplesX = c_samplesX / 2;\nconst int c_halfSamplesY = c_samplesY / 2;\nconst float c_pixelSize = (1. / c_textureSize);\n\nfloat gaussian(float sigma,float x) {\n  return exp(-(x * x) / (2. *  sigma *  sigma));\n}\n\nvec3 blurPixel(vec2 uv) {\n  float c_sigmaX = 5.;\n  float c_sigmaY = 5.;\n\n  float total = 0.;\n  vec3 ret = vec3(0.);\n  for(int iy = 0; iy < c_samplesY; ++iy) {\n    float fy = gaussian(c_sigmaY,float(iy) - float(c_halfSamplesY));\n    float offsetY = float(iy - c_halfSamplesY) * c_pixelSize;\n    for(int ix = 0; ix < c_samplesX; ++ix) {\n      float fx = gaussian(c_sigmaX,float(ix) - float(c_halfSamplesX));\n      float offsetX = float(ix - c_halfSamplesX) *  c_pixelSize;\n      total += fx * fy;\n      ret += texture2D(texture,uv + vec2(offsetX,offsetY)).rgb * fx * fy;\n    }\n  }\n  return ret / total;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n  gl_FragColor = vec4(blurPixel(v_uv0),1.);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nconst int c_samplesX = 15;\nconst int c_samplesY = 15;\n\nconst float c_textureSize = 400.;\n\nconst int c_halfSamplesX = c_samplesX / 2;\nconst int c_halfSamplesY = c_samplesY / 2;\nconst float c_pixelSize = (1. / c_textureSize);\n\nfloat gaussian(float sigma,float x) {\n  return exp(-(x * x) / (2. *  sigma *  sigma));\n}\n\nvec3 blurPixel(vec2 uv) {\n  float c_sigmaX = 5.;\n  float c_sigmaY = 5.;\n\n  float total = 0.;\n  vec3 ret = vec3(0.);\n  for(int iy = 0; iy < c_samplesY; ++iy) {\n    float fy = gaussian(c_sigmaY,float(iy) - float(c_halfSamplesY));\n    float offsetY = float(iy - c_halfSamplesY) * c_pixelSize;\n    for(int ix = 0; ix < c_samplesX; ++ix) {\n      float fx = gaussian(c_sigmaX,float(ix) - float(c_halfSamplesX));\n      float offsetX = float(ix - c_halfSamplesX) *  c_pixelSize;\n      total += fx * fy;\n      ret += texture(texture,uv + vec2(offsetX,offsetY)).rgb * fx * fy;\n    }\n  }\n  return ret / total;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n  gl_FragColor = vec4(blurPixel(v_uv0),1.);\n}\n"
      }
    }
  ],
  "subMetas": {}
}